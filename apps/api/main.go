/*
 * Saint API
 *
 * This API responsible for the saint business logic. The discord bot, and, potentially more services in the future, will call this API.
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	// WARNING!
	// Change this to a fully-qualified import path
	// once you place this file into your project.
	// For example,
	//
	//    sw "github.com/myname/myrepo/go"
	//
)

type AddRequest struct {
	A int64 `json:"a"`
	B int64 `json:"b"`
}

type AddResponse struct {
	Result int64 `json:"result"`
}

func addHandler(w http.ResponseWriter, r *http.Request) {
	fmt.Println("/add POST received")
	// Ensure the request method is POST
	if r.Method != http.MethodPost {
		http.Error(w, "Invalid request method", http.StatusMethodNotAllowed)
		return
	}

	// Parse the JSON request body
	var addReq AddRequest
	decoder := json.NewDecoder(r.Body)
	if err := decoder.Decode(&addReq); err != nil {
		http.Error(w, "Invalid request body", http.StatusBadRequest)
		return
	}

	// Perform the addition
	result := addReq.A + addReq.B

	// Create the response
	addResp := AddResponse{
		Result: result,
	}

	// Convert the response to JSON
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	if err := json.NewEncoder(w).Encode(addResp); err != nil {
		log.Fatalf("Error while encoding response: %v", err)
	}
}
func main() {
	// Setup router
	router := http.NewServeMux()
	router.HandleFunc("/add", addHandler)

	// Start server
	fmt.Println("Server listening on port 8080...")
	if err := http.ListenAndServe(":8080", router); err != nil {
		log.Fatalf("Failed to start server: %v", err)
	}
}
