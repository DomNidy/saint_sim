# https://swagger.io/specification/
openapi: 3.0.3
info:
  title: Saint API
  version: 1.0.0
  description: |-
    This API responsible for the saint business logic. The discord bot, and, potentially more services in the future, will call this API.

paths:
  /simulate:
    post:
      operationId: simulate
      description: Request a simulation, powered by SimC.
      requestBody:
        required: true
        description: "Specify simulation options and wow characters here."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/simulation_options"
      security:
        - SaintBotAuth: []
        - UserAuth: []
      # https://swagger.io/docs/specification/v3_0/describing-parameters/
      parameters:
        - name: Discord-User-Id
          in: header
          required: false
          schema:
            type: string
          description: This header MUST be present for requests originating from the Saint Discord bot. Not required when requested directly from a user.
      responses:
        "200":
          description: Simulation request was received
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/simulation_response"
        "400":
          description: When one or more of the simulation options were invalid. For example, passing an invalid region or realm for the wow character may cause this.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "404":
          $ref: "#/components/responses/not_found_error"
        "500":
          $ref: "#/components/responses/internal_error"
  /simulate/{id}:
    get:
      description: View the results of a simulation operation
      parameters:
        - in: path
          required: true
          name: id
          description: The simulation id we want to get data for. (This is different from the simulation request id)
          schema:
            type: integer
      responses:
        "200":
          description: Results of the simulation operation with the provided id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/simulation_data"
        "404":
          $ref: "#/components/responses/not_found_error"
        "500":
          $ref: "#/components/responses/internal_error"

components:
  responses:
    not_found_error:
      description: Returned when the api could not locate a requested resource.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error_response"
    internal_error:
      description: Returned whenever an internal server error occurs. This usually means the cause for the error was out of the control of the caller.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error_response"
  securitySchemes:
    SaintBotAuth:
      description: |
        Schema that the Saint Discord bot uses to authenticate with our API
        Use the `Authorization: Bot <bot_jwt_token>` header to authenticate
        Note: Certain endpoints may require a Discord-User-Id header to be provided
        when using this authentication scheme.
      type: http
      scheme: bearer
      bearerFormat: JWT
    UserAuth:
      description: |
        Schema that any frontend client uses to authenticate with our API
        Use the `Authorization: Bearer <user_jwt_token>` header to authenticate
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    wow_character:
      type: object
      description: Object containing all data needed to identify a WoW character, used to retrieve their gear and talents, etc. (Realm list here https://worldofwarcraft.blizzard.com/en-us/game/status/us)
      required:
        - region
        - realm
        - character_name
      properties:
        region:
          type: string
          description: Identifies the region in which the characters realm is located
          example: us
          enum:
            - us
            - eu
            - kr
            - tw
            - cn
        realm:
          type: string
          description: The realm which the character is located on
          example: hydraxis
          enum:
            - thrall
            - hydraxis
            - silvermoon
            - draenor
        character_name:
          type: string
          description: The name of the WoW character
          example: John
          minLength: 2
          maxLength: 12

    simulation_options:
      type: object
      description: Specifices sim options, and the character of interest to sim, send this to the api
      required:
        - wow_character
      properties:
        wow_character:
          $ref: "#/components/schemas/wow_character"

    simulation_response:
      type: object
      description: Object containing information about a simulation operation, returned from api
      properties:
        simulation_request_id:
          type: string
          description: Used to identify a simulation request in postgres

    simulation_data:
      type: object
      description: The output of a simulation.
      properties:
        id:
          type: integer
          description: ID of this simulation
          example: 42
        from_request:
          type: string
          description: The ID of the simulation request that initated this simulation
          example: "41e9a22f-d2c1-48b2-b234-15db461049d4"
        sim_result:
          type: string
          description: The actual data produced from the simulation operation
          example: "..."

    simulation_message_body:
      type: object
      description:
        This JSON object is included in a rabbitmq message, then that message gets published to the simulation_queue.
        Consumers of the simulation queue (simulation_worker) will use this JSON object to carry out the simulation.
      properties:
        simulation_id:
          type: string
          description: Used to identify a simulation request in postgres

    error_response:
      type: object
      description: Error response returned by API when something goes wrong
      properties:
        message:
          type: string
          description: Message explaining the error
