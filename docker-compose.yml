# https://docs.docker.com/reference/compose-file/

version: "3.9"

services:
  discord_bot:
    container_name: saint_discord_bot
    build:
      context: ./apps/discord_bot
      # We are using multiple build contexts so we can easily copy the modules in /pkg/ into the containers
      # https://www.docker.com/blog/dockerfiles-now-support-multiple-build-contexts/
      additional_contexts:
        root: ./
        pkg: ./pkg
      tags:
        - "saint_sim_discord_bot:latest"
    networks:
      - saint_network
    depends_on:
      - api
    environment:
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - APPLICATION_ID=${APPLICATION_ID}

  api:
    container_name: saint_api
    build:
      context: ./apps/api
      additional_contexts:
        root: ./
        pkg: ./pkg
      tags:
        - "saint_sim_api:latest"
    # Expose port 8080 in container to host machine on port 8000
    #* this is just for development
    ports:
      - 8000:8080
    networks:
      - saint_network
    depends_on:
      - postgres

  # This container actually performs the simulations
  # todo: create another message queue, allow this worker to consume from it and process sim requests
  simulation_worker:
    container_name: saint_simulation_worker
    build:
      context: ./apps/simulation_worker
      additional_contexts:
        root: ./
        pkg: ./pkg
      tags:
        - "saint_sim_worker:latest"
    depends_on:
      - rabbitmq
    networks:
      - saint_network


  postgres:
    # explicitly name this so we can connect to it via this hostname (since we are using shared docker network)
    container_name: saint_postgres
    # copy our db initialization scripts into the container
    # note: these only run if you start the container with a data directory that is empty; 
    # any pre-existing database will be left untouched on container startup (https://hub.docker.com/_/postgres)
    build:
      dockerfile_inline: |
        FROM postgres:16.4
        COPY ./db /docker-entrypoint-initdb.d/
    # shared memory limit
    shm_size: 256mb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - 5432:5432
    networks:
      - saint_network
    restart: always # this policy always restarts the container until its removal.

  pgadmin:
    container_name: saint_pgadmin
    image: dpage/pgadmin4:latest
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    ports:
      - 5050:80
    depends_on:
      - postgres
    networks:
      - saint_network
    restart: always

  # we place simulation requests into this queue
  # simulation worker will consume from here
  rabbitmq:
    container_name: saint_rabbitmq
    hostname: saint_rabbitmq
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    ports:
      - 5672:5672 # rabbitmq port
      - 15672:15672 # management ui port
    networks:
      - saint_network
    restart: always

# shared network to allow the containers to communicate
networks:
  saint_network:
    name: saint_network

# persist data from this directory inside containers
volumes:
  # persist our databases data (important)
  postgres_data:
    name: postgres_data
  # pgadmin data so we dont have to re-configure the dashboard each time
  pgadmin_data:
    name: pgadmin_data
